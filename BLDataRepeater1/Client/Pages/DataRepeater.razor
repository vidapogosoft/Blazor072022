@page "/datarepeater"
@inject HttpClient Http
@using BLDataRepeater1.Shared
@using BLDataRepeater1.Client.Components

<h1>Customers</h1>

@if (custs == null)
{
    <p><em>Loading...</em></p>
}

<div class="table-responsive">
    <table class="table table-hover table-striped">
        <thead>
            <tr><th>name</th><th>address</th><th colspan="2">zip</th></tr>
        </thead>
        <tbody>
            <DataRepeaterComponent Items="custs">
                <Row Context="cust">
                    <tr>
                        <td><h1>@cust.name</h1></td>
                    </tr>
                    <tr>
                        <td>@cust.address</td>
                        <td>@cust.zip</td>
                        <td><button class="btn btn-sm btn-danger" @onclick="@(()=> Delete(cust.id))">delete</button></td>
                    </tr>
                </Row>
            </DataRepeaterComponent>
        </tbody>
    </table>
</div>
    

    <form class="mt-5" onsubmit="return false;">
        <div class="input-group input-group-md mb-2">
            <span class="input-group-text">Name</span>
            <input type="text" class="form-control" autocomplete="off" required @bind-value="customer.name" />
        </div>
        <div class="input-group input-group-md mb-2">
            <span class="input-group-text">Address</span>
            <input type="text" class="form-control" autocomplete="off" required @bind-value="customer.address" />
        </div>
        <div class="input-group input-group-md mb-2">
            <span class="input-group-text">Zipcode</span>
            <input type="text" class="form-control" autocomplete="off" required @bind-value="customer.zip" />
            <button class="btn btn-success" @onclick="Add">Add</button>
        </div>
    </form>

    @code {

        private List<Customer> custs;
        private Customer customer = new Customer();

        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();

            custs = await Http.GetFromJsonAsync<List<Customer>>("/api/customers");
        }


        private async Task Add()
        {
            using (var msg = await Http.PostAsJsonAsync<Customer>("/api/customers", customer, System.Threading.CancellationToken.None))
            {
                if (msg.IsSuccessStatusCode)
                {
                    custs.Add(await msg.Content.ReadFromJsonAsync<Customer>());

                }
            }
        }

        private async Task Delete(string id)
        {
            using (var msg = await Http.DeleteAsync($"/api/customers/{id}", System.Threading.CancellationToken.None))
            {
                if (msg.IsSuccessStatusCode)
                {
                    int i;
                    for (i = 0; i < custs.Count && custs[i].id != id; i++) ;
                    custs.RemoveAt(i);
                   
                }
            }
        }
    }
